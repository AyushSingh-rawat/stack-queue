->Approach
Use an unordered map nextGreater to store the next greater element for each element in nums2.Use a stack to keep track of elements in nums2 that we haven't found the next greater element for.
Iterate through nums2 in reverse order and for each element, compare it with the elements at the top of the stack. While nums2[i] is greater than the top element, pop elements from the stack. We repeat this process until num is no longer greater than the top element or the stack becomes empty. Set the next greater element for nums2[i] in the map. Push nums2[i] onto the stack.
Iterate through nums1 and for each element, retrieve the next greater element from nextGreater map and push it into the result vector.
Return the result vector.

->Complexity:
Time complexity: O(m+n)
Space complexity: O(n)


->Code
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int, int> nextGreater;
        stack<int> stack;

        // Store the next greater element for each element in nums2
        for (int i = nums2.size() - 1; i >= 0; i--) {
            while (!stack.empty() && stack.top() < nums2[i]) {
                stack.pop();
            }
            if (stack.empty()) {
                nextGreater[nums2[i]] = -1;
            } else {
                nextGreater[nums2[i]] = stack.top();
            }
            stack.push(nums2[i]);
        }

        vector<int> result;
        for (auto num : nums1) {
            result.push_back(nextGreater[num]);
        }

        return result;
    }
};