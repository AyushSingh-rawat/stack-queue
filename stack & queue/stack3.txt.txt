#APPROACH 1 (without using stack)
1) primitive string will have equal no. of opened and closed parenthesis.
explaination :
 Count the number of opened parenthesis Add every char to the result string unless the first left parenthesis and the last right parenthesis.

code :
string removeOuterParentheses(string s) {
         string res;
         int opened =0;
         for( char c : s){
             if(c == '(' && opened++ > 0) res += c;
             if(c == ')' && opened-- > 1) res += c;

         }
         return res;
     }

 
#APPROACH 2 : USING STACK 
for valid parenthesis.... 
add the first opened parentheses to the stack don't add it to the ans string. after that push all the opened parentheses and pop the stack if any closed parentheses now check if the stack is empty after the pop then if mean it's the outter parentheses of primitive string then pop_back the ans string . also check don't add the opening bracket of any primitive string

code :
string removeOuterParentheses(string s) {

        stack<char> st;
        string ans="";

        for(auto c: s){

            if(!st.empty()) ans+=c;
            if(c=='(') st.push(c);
            else {
                st.pop();
                 if(st.empty()) ans.pop_back();
            }
           
        }

        return ans;
        
    }

 